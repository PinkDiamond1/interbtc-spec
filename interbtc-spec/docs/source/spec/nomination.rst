.. _vault_nomination:

Vault Nomination
================

Overview
~~~~~~~~
Nomination is a feature aimed at increasing `interBTC` issuance capacity by allowing Nominators to back a particular Vault.
Nominators lock their free collateral so that trusted Vaults can issue `interBTC` backed by the nominated collateral.
Nominators are rewarded a fraction of the fees generated by the Vault, while the remaining fees are given to the Vault.
Vaults are assumed to be trusted by their Nominators not to steal Bitcoin backed by nominated collateral.

Step-by-step
------------

#. Vaults may opt in to Nomination, expanding the total possible issuance amount.
#. The maximum amount that can be nominated is bounded by the Vault's locked collateral.
#. Nominators select one or more Vaults and lock their collateral balance on the BTC Parachain.
#. Nominators can go offline and their nominated collateral will generate rewards passively.
#. Vaults and Nominators can withdraw their collateral at any point subject to the ``SecureCollateralThreshold``.
#. Upon liquidation, Nominators are returned some collateral after remaining requests have been executed.


Protocol
~~~~~~~~

Security Assumptions and Considerations
---------------------------------------

#. The operating Vault is trusted by its Nominators not to steal the `interBTC` issued with their collateral.
#. There is no transitive trust. If a user trusts Vault A and Vault A trusts Vault B, the user does not trust Vault B.
#. Nominators are mostly-offline agents, who are slow to respond to system changes.
#. Vaults are always-online agents, who can promptly react to system updates.


Vault Nomination Protocol
-------------------------

#. Vaults must choose to opt in to the Nomination protocol.
#. Nominators select a Vault to which they can delegate collateral. They will earn a fraction of any rewards generated by the Vault.
#. Vault replacement is disallowed with nominated collateral. Otherwise, Security Assumptions 1 and 2 would be violated.
#. The nominated collateral:

   #. Cannot be withdrawn by the Vault,
   #. Is locked on the parachain,
   #. Is capped at a fraction of the Vault’s deposited collateral (:ref:`maxNominationRatio`). 
      
#. Liquidation slashing is handled as follows:

   #. In case the collateral managed by the Vault falls below the liquidation threshold, the Vault and Nominators are slashed proportionally to their collateral.
   #. In case the Vault steals Bitcoin deposited at its address, the Vault and Nominators are slashed proportionally to their collateral.

#. Vaults may opt out of the Nomination protocol which force refunds Nominators if there is enough collateral over the ``SecureCollateralThreshold``.

.. _maxNominationRatio:

Max Nomination Ratio
....................

This ratio prevents the Vault from withdrawing its entire collateral and only exposing Nominators to economic risk, or stealing without liquidation consequences.
This means that a Vault can only withdraw collateral as long as the fraction of nominated collateral does not exceed the threshold cap.
Capping Nominator collateral also prevents Vaults being “outnumbered” by Nominators and their relative fee earnings being marginalized.
Returned by the :ref:`getMaxNominationRatio` function.


Data Model
~~~~~~~~~~

Scalars
-------

NominationEnabled
.................

Flag indicating whether this feature is enabled. 

- If set to ``True``, Vaults MAY opt-in to be nominated.
- If set to ``FALSE``, Vaults MUST NOT be able to opt-in to nomination. Already nominated Vaults MUST keep being nominated as Vaults may have issued `interBTC` with nominated collateral when this feature was enabled.

Maps
----

Vaults
......

Set of Vault accounts that have enabled nomination.


Structs
-------

Nominator
.........

Stores the information of a Nominator.

.. tabularcolumns:: |l|l|L|

===========================  ==================  ========================================================
Parameter                    Type                Description
===========================  ==================  ========================================================
``id``                       AccountId           The ID of the Nominator represented by this struct.
``collateral``               Balance             Amount of nominated collateral.
===========================  ==================  ========================================================


Functions
~~~~~~~~~

.. _getMaxNominationRatio:

getMaxNominationRatio
----------------------

Returns the nomination ratio (as %), denoting the maximum amount of collateral that can be nominated to a particular Vault.

- Example (current parameterization): ``(1.5 / 1.2) - 1 = 25%``


.. _setNominationEnabled:

setNominationEnabled
--------------------

Set the feature flag for vault nomination.

Specification
.............

*Function Signature*

``setNominationEnabled(enabled)``

*Parameters*

* ``enabled``: ``True`` if nomination should be enabled, ``False`` if it should be disabled.

*Preconditions*

* The calling account MUST be root or the function MUST be called from a passed governance referendum.

*Postconditions*

* The ``NominationEnabled`` scalar MUST be set to the value of the ``enabled`` parameter.


.. _optInToNomination:

optInToNomination
-----------------

Allow the Vault to receive nominated collateral.

Specification
.............

*Function Signature*

``optInToNomination(vaultId)``

*Parameters*

* ``vaultId``: the id of the vault to enable nomination for.

*Events*

* ``NominationOptIn(vaultId)``

*Preconditions*

* The BTC Parachain status in the :ref:`security` component MUST NOT be ``SHUTDOWN:2``.
* A vault with id ``vaultId`` MUST be registered.
* The vault MUST NOT be opted in.

*Postconditions*

* The vault MUST be allowed to receive nominated collateral.


.. _optOutOfNomination:

optOutOfNomination
------------------

Disallow the Vault from receiving nominated collateral and force refund nominators.

Specification
.............

*Function Signature*

``optOutOfNomination(vaultId)``

*Parameters*

* ``vaultId``: the id of the vault to deregister from the nomination feature.

*Events*

* ``NominationOptOut(vaultId)``

*Preconditions*

* The BTC Parachain status in the :ref:`security` component MUST NOT be ``SHUTDOWN:2``.
* A vault with id ``vaultId`` MUST be registered.
* A vault with id ``vaultId`` MUST have nomination enabled.

*Postconditions*

* The vault MUST NOT be allowed to receive nominated collateral.
* Previous nominators MUST NOT be allowed to receive more rewards.
* Previous nominators MUST be allowed to withdraw their collateral.


.. _depositNominationCollateral:

depositCollateral
-----------------

Nominate collateral to a selected Vault.

Specification
.............

*Function Signature*

``depositCollateral(vaultId, nominatorId, amount)``

*Parameters*

* ``vaultId``: the id of the vault to receive the nomination.
* ``nominatorId``: the id of the user nominating collateral.
* ``amount``: the amount of collateral to nominate.

*Events*

* ``DepositCollateral(vaultId, nominatorId, amount)``

*Preconditions*

* The BTC Parachain status in the :ref:`security` component MUST be ``RUNNING:0``.
* The global nomination flag MUST be enabled.
* A vault with id ``vaultId`` MUST be registered.
* A vault with id ``vaultId`` MUST have nomination enabled.
* The vault MUST remain below the max nomination ratio.

*Postconditions*

* The vault's collateral MUST increase by the amount nominated.
* The nominators MUST earn rewards equivalent to their collateral.


.. _withdrawNominationCollateral:

withdrawCollateral
------------------

Withdraw collateral from a nominated Vault.

Specification
.............

*Function Signature*

``withdrawCollateral(vaultId, nominatorId, amount)``

*Parameters*

* ``vaultId``: the id of the previously nominated vault.
* ``nominatorId``: the id of the user who nominated collateral.
* ``amount``: the amount of collateral to withdraw.

*Events*

* ``WithdrawCollateral(vaultId, nominatorId, amount)``

*Preconditions*

* The BTC Parachain status in the :ref:`security` component MUST be ``RUNNING:0``.
* The global nomination flag MUST be enabled.
* A vault with id ``vaultId`` MUST be registered.
* A vault with id ``vaultId`` MUST have nomination enabled.
* The vault MUST remain above the secure collateralization threshold.
* Nominator MUST have nominated at least `amount`.

*Postconditions*

* The vault's collateral MUST decrease by the amount withdrawn.
* The nominator MUST receive their collateral.
* The nominators MUST earn rewards equivalent to their collateral.


Events
~~~~~~

NominationOptIn
---------------

*Event Signature*

``NominationOptIn(vaultId)``

*Parameters*

* ``vaultId``: the id of the vault who opted in

*Functions*

* :ref:`optInToNomination`


NominationOptOut
----------------

*Event Signature*

``NominationOptOut(vaultId)``

*Parameters*

* ``vaultId``: the id of the vault who opted out

*Functions*

* :ref:`optOutOfNomination`


DepositCollateral
-----------------

*Event Signature*

``DepositCollateral(vaultId, nominatorId, amount)``

*Parameters*

* ``vaultId``: the id of the vault who receives the nomination.
* ``nominatorId``: the id of the nominator who is depositing collateral.
* ``amount``: the amount of nominated collateral.

*Functions*

* :ref:`depositNominationCollateral`


WithdrawCollateral
------------------

*Event Signature*

``WithdrawCollateral(vaultId, nominatorId, amount)``

*Parameters*

* ``vaultId``: the id of the previously nominated vault.
* ``nominatorId``: the id of the nominator who is withdrawing collateral.
* ``amount``: the amount of nominated collateral.

*Functions*

* :ref:`withdrawNominationCollateral`